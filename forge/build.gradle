plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "walkietalkie.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    // Define as variáveis que o mods.toml pode usar
    inputs.properties(
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_group_id: mod_group_id,
            mod_authors: mod_authors,
            mod_description: mod_description,
            minecraft_version_range: minecraft_version_range,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range
    )

    // Encontra o arquivo mods.toml e substitui as variáveis
    filesMatching('META-INF/mods.toml') {
        expand(inputs.properties)
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
